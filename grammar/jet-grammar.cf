token InlineHaskell '{' ((char - ["{}\\"]) | ('\\' ["{}\\nt"]))* '}';
TSystem. TypeSystem ::= InlineHaskell [TypeRule];
TRule. TypeRule ::= "type" Ident "<-" TypePremises Judgement;

TPremis. TypePremises ::= "if" [JudgementWSC] "then";
TPNone.  TypePremises ::= ;

JSideCond. JudgementWSC ::= InlineHaskell;
JJudge. JudgementWSC ::= Judgement;

JSingle. Judgement ::= InlineHaskell "|-" "(" Ident Ident [Ident] ")" Type;

-- In TypePremises we want to have size of [Ident] to be 1 in TypeRule we want
-- [Ident] to be 2 such that we can create the pattern (x:xs)
JList. Judgement ::= InlineHaskell "|-" "[" Ident Ident [Ident] "]" Type;

TType. Type ::= Ident [Ident];
TNone. Type ::= ;

terminator TypeRule ";" ;
separator nonempty JudgementWSC ",";
separator Ident "";

comment "--";
comment "{-" "-}"
