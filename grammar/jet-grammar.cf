token InlineHaskell '{' ((char - ["{}\\"]) | ('\\' ["{}\\nt"]))* '}';

TSystem. TypeSystem ::= [TypeRule] ;

TRule. TypeRule ::= "rule" RuleName "<-" TypePremises ContextDefn TypeJudgement SideCondition;

TPremises. TypePremises ::= "if" [RuleApplication] "then" ;
TNoPremis. TypePremises ::= ;

TJudge. TypeJudgement ::= Ident "(" Ident [Ident] ")" Type;
TType. Type ::= ":" Ident [Ident];
TNone. Type ::= ;

HSideCondition. SideCondition ::= InlineHaskell;
HEmptySideCondition. SideCondition ::= ;

RName. RuleName ::= Ident;
RApp. RuleApplication ::= Ident Ident Type ;

CtxDefn. ContextDefn ::= InlineHaskell ;

separator TypeJudgement ",";
separator RuleApplication ",";
separator Ident "";
terminator TypeRule ";" ;
