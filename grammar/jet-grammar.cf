token InlineHaskell '{' ((char - ["{}\\"]) | ('\\' ["{}\\nt"]))* '}';

TSystem. TypeSystem ::= InlineHaskell [TypeRule] ;

TRule. TypeRule ::= "rule" RuleName "<-" TypePremisesCond ContextDefn TypeJudgement SideCondition;

TPremisCond. TypePremisesCond ::= "if" [TypePremises] "then" ;
TNoPremis. TypePremisesCond ::= ;

TJudge. TypeJudgement ::= Ident "(" Ident [Ident] ")" Type;
TType. Type ::= ":" Ident [Ident];
TNone. Type ::= ;

HSideCondition. SideCondition ::= InlineHaskell;
HEmptySideCondition. SideCondition ::= ;

RName. RuleName ::= Ident;
TPremises. TypePremises ::= Ident Ident Type ;

CtxDefn. ContextDefn ::= InlineHaskell ;

separator TypeJudgement ",";
separator TypePremises ",";
separator Ident "";
terminator TypeRule ";" ;

comment "--";
comment "[-" "-]"
