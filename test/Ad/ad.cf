Prog.    Program ::= [TypeDecl] ProcDecl ";";
TDecl.   TypeDecl ::= "type" Ident "is" TypeName;
FDecl.   FuncDecl ::= "function" Ident "(" [VarDecl] ")" "return" TypeName [Decl] "begin" [Stmnt] "end";
PDecl.   ProcDecl ::= "procedure" Ident "(" [VarDecl] ")" [Decl] "begin" [Stmnt] "end";
VDecl.   VarDecl  ::= Ident ":" TypeName; 
separator VarDecl ";";
terminator TypeDecl ";";

DFunc.   Decl ::= FuncDecl;
DProc.   Decl ::= ProcDecl;
DVar.    Decl ::= VarDecl;
terminator Decl ";";

SNull.   Stmnt ::= "null";
SPrint.  Stmnt ::= "print" Expr;
SAssign. Stmnt ::= LValue ":=" Expr;
SIf.     Stmnt ::= "if" Expr "then" [Stmnt] "else" [Stmnt] "end";
SWhile.  Stmnt ::= "while" Expr "do" [Stmnt] "end";
SBlock.  Stmnt ::= "declare" [Decl] "begin" [Stmnt] "end";
SCall.   Stmnt ::= Ident "(" [Expr] ")";
SReturn. Stmnt ::= "return" Expr;
terminator nonempty Stmnt ";";

EInt.    Expr4 ::= Integer;
ETrue.   Expr4 ::= "true";
EFalse.  Expr4 ::= "false";
EVar.    Expr4 ::= [LValue];

ECall.   Expr3 ::= Ident "(" [Expr] ")";
ENeg.    Expr3 ::= "neg" Expr4;
ENot.    Expr3 ::= "not" Expr4;

EMul.    Expr2 ::= Expr2 "*" Expr3;
EAnd.    Expr2 ::= Expr2 "and" Expr3;

EAdd.    Expr1 ::= Expr1 "+" Expr2;
EOr.     Expr1 ::= Expr1 "or" Expr2;

EEq.     Expr  ::= Expr "=" Expr1;
ELT.     Expr  ::= Expr "<" Expr1;

LVVar. LValue1 ::= Ident;
LVArr. LValue ::= LValue1 "[" Expr "]";
separator nonempty LValue ".";

coercions Expr 5;
separator Expr ",";
coercions LValue 1;

TNBool.  TypeName2 ::= "bool";
TNInt.   TypeName2 ::= "int";
TNSyn.   TypeName2 ::= Ident;
TNArr.   TypeName1 ::= "array" TypeName;
TNRec.   TypeName  ::= "record" [VarDecl] "end";

coercions TypeName 2;
internal TNNone. TypeName ::= ;
