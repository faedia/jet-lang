{
import qualified Data.Map as M
import AbsAd

type Type = TypeName

data ContextKey = Ret | Proc Ident [Type] | Func Ident [Type] | Var Ident | Typ Ident
    deriving (Eq, Ord, Show, Read)

newtype Context = Context (Type, JetContextMap (Ident, [Type]) Type, JetContextMap (Ident, [Type]) Type, JetContextMap Ident Type, JetContextMap Ident Type)
    deriving (Eq, Ord, Show, Read)

instance JetContextBase Context where
    emptyContext = Context (TNNone, emptyContext, emptyContext, emptyContext, emptyContext)
    newBlock (Context (t, p, f, v, s)) = Context (t, newBlock p, newBlock f, newBlock v, s)

instance JetContext Context ContextKey Type where
    lookupContext Ret (Context (t, _, _, _, _)) = Succ t
    lookupContext (Proc ident ts) (Context (_, p, _, _, _)) = lookupContext (ident, ts) p
    lookupContext (Func ident ts) (Context (_, _, f, _, _)) = lookupContext (ident, ts) f
    lookupContext (Var ident) (Context (_, _, _, v, _)) = lookupContext ident v
    lookupContext (Typ ident) (Context (_, _, _, _, s)) = lookupContext ident s
    expandContext Ret t' (Context (_, p, f, v, s)) = Succ (Context (t', p, f, v, s))
    expandContext (Proc ident ts) t (Context (rt, p, f, v, s)) = do
        p' <- expandContextIf (\(i, t) (JetContextMap (b:bs)) -> null (filter (\(i', t') -> i == i') (M.keys b))) (ident, ts) t p
        Succ (Context (rt, p', f, v, s))
    expandContext (Func ident ts) t (Context (rt, p, f, v, s)) = do
        f' <- expandContextIf (\(i, t) (JetContextMap (b:bs)) -> null (filter (\(i', t') -> i == i') (M.keys b))) (ident, ts) t f
        Succ (Context (rt, p, f', v, s))
    expandContext (Var ident) t (Context (rt, p, f, v, s)) = do
        v' <- expandContext ident t v
        Succ (Context (rt, p, f, v', s))
    expandContext (Typ ident) t (Context (rt, p, f, v, s)) = do
        s' <- expandContext ident t s
        Succ (Context (rt, p, f, v, s'))

makeCheckError e t1 t2 = "Type error"
makeCheckErrorList _ _ _ = "Type error"
makeInferError _ _ = "Type error"

vdeclsTypes :: Functor f => f VarDecl -> f Type
vdeclsTypes = fmap (\(VDecl _ t) -> t)
}

typerule ProgT <- if {ctx} |- [TypeDecl tdecls], {var1} |- (ProcDecl proc) then (Program Prog tdecls proc) return {Succ ()};

typerule TypeDeclT <- if {ctx} |- (Type t) : t', {ctx' <- expandContext (Typ name) t' ctx} then (TypeDecl TDecl name t) return {Succ ctx'};

typerule TypeDeclEmpty <- [TypeDecl] return {Succ ctx};
typerule TypeDeclCons <- if {ctx} |- (TypeDecl decl), {var1} |- [TypeDecl decls] then [TypeDecl decl decls] return {Succ var2};

typerule FuncDeclT <- if
    {ctx' <- expandContext (Func name (vdeclsTypes vdecls)) t ctx},
    {(newBlock ctx')} |- [VarDecl vdecls],
    {var1} |- [Decl decls],
    {ctxret <- expandContext Ret t var2},
    {ctxret} |- [Stmnt stmnts] then (FuncDecl FDecl name vdecls t decls stmnts) return {Succ ctx'};
typerule ProcDeclT <- if
    {ctx' <- expandContext (Proc name (vdeclsTypes vdecls)) TNNone ctx},
    {(newBlock ctx')} |- [VarDecl vdecls],
    {var1} |- [Decl decls],
    {ctxret <- expandContext Ret TNNone var2},
    {ctxret} |- [Stmnt stmnts] then (ProcDecl PDecl name vdecls decls stmnts) return {Succ ctx'};
typerule VarDeclT <- if {ctx} |- (Type t) : t', {ctx' <- expandContext (Var name) t' ctx} then (VarDecl VDecl name t) return {Succ ctx'};

typerule VarDeclEmpty <- [VarDecl] return {Succ ctx};
typerule VarDeclCons <- if {ctx} |- (VarDecl decl), {var1} |- [VarDecl decls] then [VarDecl decl decls] return {Succ var2};

typerule DFuncT <- if {ctx} |- (FuncDecl decl) then (Decl DFunc decl) return {Succ var1};
typerule DProcT <- if {ctx} |- (ProcDecl decl) then (Decl DProc decl) return {Succ var1};
typerule DVar <- if {ctx} |- (VarDecl decl) then (Decl DVar decl) return {Succ var1};

typerule DeclEmpty <- [Decl] return {Succ ctx};
typerule DeclCons <- if {ctx} |- (Decl decl), {var1} |- [Decl decls] then [Decl decl decls] return {Succ var2};

typerule NullT <- (Stmnt SNull) return {Succ ()};
typerule PrintT <- if {ctx} |- (Expr e) : t then (Stmnt SPrint e) return {Succ ()};
typerule AssignT <- if {ctx} |- (LValue name) : t, {ctx} |- (Expr e) : t then (Stmnt SAssign name e) return {Succ ()};
typerule IfT <- if {ctx} |- (Expr e) : TNBool, {ctx} |- [Stmnt s1], {ctx} |- [Stmnt s2] then (Stmnt SIf e s1 s2) return {Succ ()};
typerule WhileT <- if {ctx} |- (Expr e) : TNBool, {ctx} |- [Stmnt stmnts] then (Stmnt SWhile e stmnts) return {Succ ()};
typerule BlockT <- if {(newBlock ctx)} |- [Decl decls], {var1} |- [Stmnt stmnts] then (Stmnt SBlock decls stmnts) return {Succ ()};
-- Call
-- Return

typerule StmntEmpty <- [Stmnt] return {Succ ()};
typerule StmntCons <- if {ctx} |- (Stmnt stmnt), {ctx} |- [Stmnt stmnts] then [Stmnt stmnt stmnts] return {Succ ()};

typerule IntT <- (Expr EInt n) : TNInt return {Succ ()};
typerule TrueT <- (Expr ETrue) : TNBool return {Succ ()};
typerule FalseT <- (Expr EFalse) : TNBool return {Succ ()};
typerule VarT <- if {ctx} |- [LValue name] : t then (Expr EVar name) : t return {Succ ()};
typerule NegT <- if {ctx} |- (Expr e) : TNInt then (Expr ENeg e) : TNInt return {Succ ()};
typerule NotT <- if {ctx} |- (Expr e) : TNBool then (Expr ENot e) : TNBool return {Succ ()};
-- Call
typerule MulT <- if {ctx} |- (Expr e1) : TNInt, {ctx} |- (Expr e2) : TNInt then (Expr EMul e1 e2) : TNInt return {Succ ()};
typerule AndT <- if {ctx} |- (Expr e1) : TNBool, {ctx} |- (Expr e2) : TNBool then (Expr EAnd e1 e2) : TNBool return {Succ ()};
typerule AddT <- if {ctx} |- (Expr e1) : TNInt, {ctx} |- (Expr e2) : TNInt then (Expr EAdd e1 e2) : TNInt return {Succ ()};
typerule OrT <- if {ctx} |- (Expr e1) : TNBool, {ctx} |- (Expr e2) : TNBool then (Expr EOr e1 e2) : TNBool return {Succ ()};
typerule EqT <- if {ctx} |- (Expr e1) : t, {ctx} |- (Expr e2) : t then (Expr EEq e1 e2) : TNBool return {Succ ()};
typerule LTT <- if {ctx} |- (Expr e1) : TNInt, {ctx} |- (Expr e2) : TNInt then (Expr ELT e1 e2) : TNBool return {Succ ()};
typerule LVVarT <- if {t <- lookupContext (Var name) ctx} then (LValue LVVar name) : t return {Succ ()};
typerule LVArrT <- if {ctx} |- (LValue name) : TNArr t, {ctx} |- (Expr e) : TNInt then (LValue LVArr name e) : t return {Succ ()};

typerule LValueSngle <- if {ctx} |- (LValue name) : t then [LValue name] : t return {Succ ()};
typerule LValueCons <- if {let Context (tret, _, _, _, tdecls) = ctx; ctx' = Context (tret, emptyContext, emptyContext, emptyContext, tdecls)}, 
        {ctx} |- (LValue nhead) : tmp, {ctx} |- (Type tmp) : TNRec decls, {ctx'} |- [VarDecl decls], {var1} |- [LValue ntail] : t then 
    [LValue nhead ntail] : t return {Succ ()};

typerule SynT <- if {t' <- lookupContext (Typ t) ctx} then (Type TNSyn t) : t' return {Succ ()};
typerule TypeT <- (Type t) : t return {Succ ()};